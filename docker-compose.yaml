# 1)  On identifie les conteneurs dans "services" (applicatifs et utilitaires)
# ***********Pour le SERVER NGINX*****************
#   - 2)  On specifie les images à l'interieur de chaque container
#   - 3)  Exposition de son port(80,qui se trouve dans la documentation officielle, on le lie à un port de notre machine hote 8000)
#   - 4)  Maintenant il faut le dire d'interpreter le code php du container "php" en y ajoutant un montage (bind mount) avec la clé
#           volumes. Ici, nous allons lier un dossier local, disons un dossier nginx (que nous devons encore
#           ajouter), et y mettre un fichier nginx.conf
#   - 5) Créer un dossier 'nginx' sur notre machine hote ainsi qu'un fichier nginx.conf
# ***********Pour le contenair php ***************************
#   - 2) Utiliser une image personnalisé de php (Dockerfile) qui se basera sur l'image officile de php dans Dockerhub car je vais ajouter des extensions supplémentaires nécessaires pour Laravel.
#   - 3) Donc ajouter un nouveau dossier à côté du dossier nginx, que je nommerai dockerfiles. À l’intérieur, j’ajouterai un fichier php.dockerfile.
services:
  server:
    image: "nginx:stable-alpine"
    ports:
      - 8000:80
    volumes:
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
      - mysql
  php:
    build:
      context: ./
      dockerfile: ./dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html:delegated
  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env
  composer:
    build:
      context: ./
      dockerfile: ./dockerfiles/composer.dockerfile
    volumes:
      - ./src:/var/www/html
  artisan:
    build:
      context: ./
      dockerfile: ./dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]
  npm:
    image: node:latest
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html
